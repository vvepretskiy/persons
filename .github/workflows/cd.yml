name: CD

on:
  workflow_run:
    workflows: ["CI"]  # Name of the CI workflow
    types:
      - completed  # Trigger when the CI workflow is completed

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}  # Only run if CI was successful
    
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'

      - name: Cache pnpm
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install dependencies
        run: pnpm install

      - name: Build NestJS app
        run: pnpm nx build server

      - name: Deploy NestJS app to Heroku
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }} # Store your Heroku API key in GitHub Secrets
        run: |
          git remote add heroku https://git.heroku.com/your-heroku-app-name.git
          git add .
          git commit -m "Deploying NestJS app"
          git push heroku main

      - name: Build Angular app
        run: pnpm nx build frontend --prod

      - name: Deploy Angular app to Vercel
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }} # Store your Vercel token in GitHub Secrets
        run: |
          pnpm install -g vercel
          vercel --prod --token $VERCEL_TOKEN --confirm

#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v2

#      - name: Log in to Docker Hub
#        uses: docker/login-action@v2
#        with:
#          username: ${{ secrets.DOCKER_USERNAME }}  # Your Docker Hub username
#          password: ${{ secrets.DOCKER_PASSWORD }}  # Your Docker Hub password

#     - name: Build and push Docker images
#        run: |
#          docker-compose -f docker-compose.yaml build
#          docker-compose -f docker-compose.yaml push

#      - name: Deploy with Docker Compose
#        run: |
#          docker-compose -f docker-compose.yaml up -d
