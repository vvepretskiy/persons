"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = default_1;
const devkit_1 = require("@nx/devkit");
const executor_options_utils_1 = require("@nx/devkit/src/generators/executor-options-utils");
async function default_1(tree) {
    (0, executor_options_utils_1.forEachExecutorOptions)(tree, '@nx/playwright:playwright', (options, projectName, targetName, configurationName) => {
        if (options?.['baseUrl']) {
            const project = (0, devkit_1.readProjectConfiguration)(tree, projectName);
            if (configurationName) {
                delete project.targets[targetName].configurations[configurationName]['baseUrl'];
            }
            else {
                delete project.targets[targetName].options['baseUrl'];
            }
            (0, devkit_1.updateProjectConfiguration)(tree, projectName, project);
        }
    });
    const nxJson = (0, devkit_1.readNxJson)(tree);
    for (const [targetNameOrExecutor, target] of Object.entries(nxJson.targetDefaults)) {
        if (targetNameOrExecutor === '@nx/playwright:playwright' ||
            (target.executor && target.executor === '@nx/playwright:playwright')) {
            let updated = false;
            if (target.options?.['baseUrl']) {
                delete nxJson.targetDefaults[targetNameOrExecutor].options['baseUrl'];
                updated = true;
            }
            if (target.configurations) {
                for (const [configurationName, configuration] of Object.entries(target.configurations)) {
                    if (configuration['baseUrl']) {
                        delete nxJson.targetDefaults[targetNameOrExecutor].configurations[configurationName]['baseUrl'];
                        updated = true;
                    }
                }
            }
            if (updated) {
                (0, devkit_1.updateNxJson)(tree, nxJson);
            }
        }
    }
    await (0, devkit_1.formatFiles)(tree);
}
