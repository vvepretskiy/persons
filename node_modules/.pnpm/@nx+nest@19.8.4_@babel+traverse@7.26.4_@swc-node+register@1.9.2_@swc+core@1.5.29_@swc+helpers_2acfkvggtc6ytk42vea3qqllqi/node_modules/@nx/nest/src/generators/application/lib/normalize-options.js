"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.normalizeOptions = normalizeOptions;
exports.toNodeApplicationGeneratorOptions = toNodeApplicationGeneratorOptions;
const devkit_1 = require("@nx/devkit");
const project_name_and_root_utils_1 = require("@nx/devkit/src/generators/project-name-and-root-utils");
const eslint_1 = require("@nx/eslint");
async function normalizeOptions(tree, options) {
    const { projectName: appProjectName, projectRoot: appProjectRoot, projectNameAndRootFormat, } = await (0, project_name_and_root_utils_1.determineProjectNameAndRootOptions)(tree, {
        name: options.name,
        projectType: 'application',
        directory: options.directory,
        projectNameAndRootFormat: options.projectNameAndRootFormat,
        rootProject: options.rootProject,
        callingGenerator: '@nx/nest:application',
    });
    options.rootProject = appProjectRoot === '.';
    options.projectNameAndRootFormat = projectNameAndRootFormat;
    const nxJson = (0, devkit_1.readNxJson)(tree);
    const addPlugin = process.env.NX_ADD_PLUGINS !== 'false' &&
        nxJson.useInferencePlugins !== false;
    return {
        addPlugin,
        ...options,
        strict: options.strict ?? false,
        appProjectName,
        appProjectRoot,
        linter: options.linter ?? eslint_1.Linter.EsLint,
        unitTestRunner: options.unitTestRunner ?? 'jest',
        e2eTestRunner: options.e2eTestRunner ?? 'jest',
    };
}
function toNodeApplicationGeneratorOptions(options) {
    return {
        name: options.name,
        directory: options.directory,
        frontendProject: options.frontendProject,
        projectNameAndRootFormat: options.projectNameAndRootFormat,
        linter: options.linter,
        skipFormat: true,
        skipPackageJson: options.skipPackageJson,
        standaloneConfig: options.standaloneConfig,
        tags: options.tags,
        unitTestRunner: options.unitTestRunner,
        e2eTestRunner: options.e2eTestRunner,
        setParserOptionsProject: options.setParserOptionsProject,
        rootProject: options.rootProject,
        bundler: 'webpack', // Some features require webpack plugins such as TS transformers
        isNest: true,
        addPlugin: options.addPlugin,
    };
}
