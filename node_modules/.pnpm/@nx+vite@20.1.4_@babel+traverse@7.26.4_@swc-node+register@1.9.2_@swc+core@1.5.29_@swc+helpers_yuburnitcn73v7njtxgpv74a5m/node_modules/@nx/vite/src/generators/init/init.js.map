{"version":3,"sources":["../../../../../../packages/vite/src/generators/init/init.ts"],"sourcesContent":["import {\n  createProjectGraphAsync,\n  formatFiles,\n  GeneratorCallback,\n  readNxJson,\n  runTasksInSerial,\n  Tree,\n  updateNxJson,\n} from '@nx/devkit';\nimport { addPlugin } from '@nx/devkit/src/utils/add-plugin';\n\nimport { setupPathsPlugin } from '../setup-paths-plugin/setup-paths-plugin';\nimport { createNodesV2 } from '../../plugins/plugin';\nimport { InitGeneratorSchema } from './schema';\nimport { checkDependenciesInstalled, moveToDevDependencies } from './lib/utils';\nimport { addViteTempFilesToGitIgnore } from '../../utils/add-vite-temp-files-to-gitignore';\n\nexport function updateNxJsonSettings(tree: Tree) {\n  const nxJson = readNxJson(tree);\n\n  const productionFileSet = nxJson.namedInputs?.production;\n  if (productionFileSet) {\n    productionFileSet.push(\n      '!{projectRoot}/**/?(*.)+(spec|test).[jt]s?(x)?(.snap)',\n      '!{projectRoot}/tsconfig.spec.json',\n      '!{projectRoot}/src/test-setup.[jt]s'\n    );\n\n    nxJson.namedInputs.production = Array.from(new Set(productionFileSet));\n  }\n\n  const hasPlugin = nxJson.plugins?.some((p) =>\n    typeof p === 'string'\n      ? p === '@nx/vite/plugin'\n      : p.plugin === '@nx/vite/plugin'\n  );\n\n  if (!hasPlugin) {\n    nxJson.targetDefaults ??= {};\n    nxJson.targetDefaults['@nx/vite:test'] ??= {};\n    nxJson.targetDefaults['@nx/vite:test'].cache ??= true;\n    nxJson.targetDefaults['@nx/vite:test'].inputs ??= [\n      'default',\n      productionFileSet ? '^production' : '^default',\n    ];\n  }\n\n  updateNxJson(tree, nxJson);\n}\n\nexport function initGenerator(tree: Tree, schema: InitGeneratorSchema) {\n  return initGeneratorInternal(tree, { addPlugin: false, ...schema });\n}\n\nexport async function initGeneratorInternal(\n  tree: Tree,\n  schema: InitGeneratorSchema\n) {\n  const nxJson = readNxJson(tree);\n  const addPluginDefault =\n    process.env.NX_ADD_PLUGINS !== 'false' &&\n    nxJson.useInferencePlugins !== false;\n  schema.addPlugin ??= addPluginDefault;\n\n  if (schema.addPlugin) {\n    await addPlugin(\n      tree,\n      await createProjectGraphAsync(),\n      '@nx/vite/plugin',\n      createNodesV2,\n      {\n        buildTargetName: ['build', 'vite:build', 'vite-build'],\n        testTargetName: ['test', 'vite:test', 'vite-test'],\n        serveTargetName: ['serve', 'vite:serve', 'vite-serve'],\n        previewTargetName: ['preview', 'vite:preview', 'vite-preview'],\n        serveStaticTargetName: [\n          'serve-static',\n          'vite:serve-static',\n          'vite-serve-static',\n        ],\n        typecheckTargetName: ['typecheck', 'vite:typecheck', 'vite-typecheck'],\n      },\n      schema.updatePackageScripts\n    );\n  }\n\n  updateNxJsonSettings(tree);\n  addViteTempFilesToGitIgnore(tree);\n\n  if (schema.setupPathsPlugin) {\n    await setupPathsPlugin(tree, { skipFormat: true });\n  }\n\n  const tasks: GeneratorCallback[] = [];\n  if (!schema.skipPackageJson) {\n    tasks.push(moveToDevDependencies(tree));\n    tasks.push(checkDependenciesInstalled(tree, schema));\n  }\n\n  if (!schema.skipFormat) {\n    await formatFiles(tree);\n  }\n\n  return runTasksInSerial(...tasks);\n}\n\nexport default initGenerator;\n"],"names":["initGenerator","initGeneratorInternal","updateNxJsonSettings","tree","nxJson","readNxJson","productionFileSet","namedInputs","production","push","Array","from","Set","hasPlugin","plugins","some","p","plugin","targetDefaults","cache","inputs","updateNxJson","schema","addPlugin","addPluginDefault","process","env","NX_ADD_PLUGINS","useInferencePlugins","createProjectGraphAsync","createNodesV2","buildTargetName","testTargetName","serveTargetName","previewTargetName","serveStaticTargetName","typecheckTargetName","updatePackageScripts","addViteTempFilesToGitIgnore","setupPathsPlugin","skipFormat","tasks","skipPackageJson","moveToDevDependencies","checkDependenciesInstalled","formatFiles","runTasksInSerial"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;;;;;IA0GA,OAA6B;eAA7B;;IAxDgBA,aAAa;eAAbA;;IAIMC,qBAAqB;eAArBA;;IArCNC,oBAAoB;eAApBA;;;;wBATT;2BACmB;kCAEO;wBACH;uBAEoC;6CACtB;AAErC,SAASA,qBAAqBC,IAAU;QAGnBC,qBAWRA;IAblB,MAAMA,SAASC,IAAAA,kBAAU,EAACF;IAE1B,MAAMG,qBAAoBF,sBAAAA,OAAOG,WAAW,qBAAlBH,oBAAoBI,UAAU;IACxD,IAAIF,mBAAmB;QACrBA,kBAAkBG,IAAI,CACpB,yDACA,qCACA;QAGFL,OAAOG,WAAW,CAACC,UAAU,GAAGE,MAAMC,IAAI,CAAC,IAAIC,IAAIN;IACrD;IAEA,MAAMO,aAAYT,kBAAAA,OAAOU,OAAO,qBAAdV,gBAAgBW,IAAI,CAAC,CAACC,IACtC,OAAOA,MAAM,WACTA,MAAM,oBACNA,EAAEC,MAAM,KAAK;IAGnB,IAAI,CAACJ,WAAW;YACdT,SACAA,wBAAsB,aACtBA,mCACAA;;QAHAA,oBAAAA,UAAAA,QAAOc,4CAAPd,QAAOc,iBAAmB,CAAC;;QAC3Bd,MAAAA,yBAAAA,OAAOc,cAAc,CAAA,CAAC,cAAA,gBAAgB,gBAAtCd,sBAAqB,CAAC,YAAgB,GAAK,CAAC;;QAC5CA,WAAAA,oCAAAA,OAAOc,cAAc,CAAC,gBAAgB,EAACC,0BAAvCf,kCAAuCe,QAAU;;QACjDf,YAAAA,qCAAAA,OAAOc,cAAc,CAAC,gBAAgB,EAACE,4BAAvChB,mCAAuCgB,SAAW;YAChD;YACAd,oBAAoB,gBAAgB;SACrC;IACH;IAEAe,IAAAA,oBAAY,EAAClB,MAAMC;AACrB;AAEO,SAASJ,cAAcG,IAAU,EAAEmB,MAA2B;IACnE,OAAOrB,sBAAsBE,MAAM;QAAEoB,WAAW;OAAUD;AAC5D;AAEO,eAAerB,sBACpBE,IAAU,EACVmB,MAA2B;QAM3BA;IAJA,MAAMlB,SAASC,IAAAA,kBAAU,EAACF;IAC1B,MAAMqB,mBACJC,QAAQC,GAAG,CAACC,cAAc,KAAK,WAC/BvB,OAAOwB,mBAAmB,KAAK;;IACjCN,eAAAA,UAAAA,QAAOC,kCAAPD,QAAOC,YAAcC;IAErB,IAAIF,OAAOC,SAAS,EAAE;QACpB,MAAMA,IAAAA,oBAAS,EACbpB,MACA,MAAM0B,IAAAA,+BAAuB,KAC7B,mBACAC,qBAAa,EACb;YACEC,iBAAiB;gBAAC;gBAAS;gBAAc;aAAa;YACtDC,gBAAgB;gBAAC;gBAAQ;gBAAa;aAAY;YAClDC,iBAAiB;gBAAC;gBAAS;gBAAc;aAAa;YACtDC,mBAAmB;gBAAC;gBAAW;gBAAgB;aAAe;YAC9DC,uBAAuB;gBACrB;gBACA;gBACA;aACD;YACDC,qBAAqB;gBAAC;gBAAa;gBAAkB;aAAiB;QACxE,GACAd,OAAOe,oBAAoB;IAE/B;IAEAnC,qBAAqBC;IACrBmC,IAAAA,wDAA2B,EAACnC;IAE5B,IAAImB,OAAOiB,gBAAgB,EAAE;QAC3B,MAAMA,IAAAA,kCAAgB,EAACpC,MAAM;YAAEqC,YAAY;QAAK;IAClD;IAEA,MAAMC,QAA6B,EAAE;IACrC,IAAI,CAACnB,OAAOoB,eAAe,EAAE;QAC3BD,MAAMhC,IAAI,CAACkC,IAAAA,4BAAqB,EAACxC;QACjCsC,MAAMhC,IAAI,CAACmC,IAAAA,iCAA0B,EAACzC,MAAMmB;IAC9C;IAEA,IAAI,CAACA,OAAOkB,UAAU,EAAE;QACtB,MAAMK,IAAAA,mBAAW,EAAC1C;IACpB;IAEA,OAAO2C,IAAAA,wBAAgB,KAAIL;AAC7B;MAEA,WAAezC"}