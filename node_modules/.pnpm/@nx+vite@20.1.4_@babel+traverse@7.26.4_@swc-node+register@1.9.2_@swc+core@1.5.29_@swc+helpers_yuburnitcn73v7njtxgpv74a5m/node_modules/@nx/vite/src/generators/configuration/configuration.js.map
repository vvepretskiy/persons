{"version":3,"sources":["../../../../../../packages/vite/src/generators/configuration/configuration.ts"],"sourcesContent":["import {\n  formatFiles,\n  GeneratorCallback,\n  joinPathFragments,\n  readJson,\n  readNxJson,\n  readProjectConfiguration,\n  runTasksInSerial,\n  Tree,\n  updateJson,\n  writeJson,\n} from '@nx/devkit';\nimport {\n  getUpdatedPackageJsonContent,\n  initGenerator as jsInitGenerator,\n} from '@nx/js';\nimport { getImportPath } from '@nx/js/src/utils/get-import-path';\nimport { isUsingTsSolutionSetup } from '@nx/js/src/utils/typescript/ts-solution-setup';\nimport { join } from 'node:path/posix';\nimport type { PackageJson } from 'nx/src/utils/package-json';\nimport { ensureDependencies } from '../../utils/ensure-dependencies';\nimport {\n  addBuildTarget,\n  addPreviewTarget,\n  addServeTarget,\n  createOrEditViteConfig,\n  TargetFlags,\n} from '../../utils/generator-utils';\nimport initGenerator from '../init/init';\nimport vitestGenerator from '../vitest/vitest-generator';\nimport { convertNonVite } from './lib/convert-non-vite';\nimport { ViteConfigurationGeneratorSchema } from './schema';\n\nexport function viteConfigurationGenerator(\n  host: Tree,\n  schema: ViteConfigurationGeneratorSchema\n) {\n  return viteConfigurationGeneratorInternal(host, {\n    addPlugin: false,\n    ...schema,\n  });\n}\n\nexport async function viteConfigurationGeneratorInternal(\n  tree: Tree,\n  schema: ViteConfigurationGeneratorSchema\n) {\n  const tasks: GeneratorCallback[] = [];\n\n  const projectConfig = readProjectConfiguration(tree, schema.project);\n  const { targets, root: projectRoot } = projectConfig;\n\n  const projectType = projectConfig.projectType ?? 'library';\n\n  schema.includeLib ??= projectType === 'library';\n\n  // Setting default to jsdom since it is the most common use case (React, Web).\n  // The @nx/js:lib generator specifically sets this to node to be more generic.\n  schema.testEnvironment ??= 'jsdom';\n\n  /**\n   * This is for when we are converting an existing project\n   * to use the vite executors.\n   */\n  let projectAlreadyHasViteTargets: TargetFlags = {};\n\n  if (!schema.newProject) {\n    await convertNonVite(tree, schema, projectRoot, projectType, targets);\n  }\n\n  const jsInitTask = await jsInitGenerator(tree, {\n    ...schema,\n    skipFormat: true,\n    tsConfigName: projectRoot === '.' ? 'tsconfig.json' : 'tsconfig.base.json',\n  });\n  tasks.push(jsInitTask);\n  const initTask = await initGenerator(tree, { ...schema, skipFormat: true });\n  tasks.push(initTask);\n  tasks.push(ensureDependencies(tree, schema));\n\n  const nxJson = readNxJson(tree);\n  const addPluginDefault =\n    process.env.NX_ADD_PLUGINS !== 'false' &&\n    nxJson.useInferencePlugins !== false;\n  schema.addPlugin ??= addPluginDefault;\n\n  const hasPlugin = nxJson.plugins?.some((p) =>\n    typeof p === 'string'\n      ? p === '@nx/vite/plugin'\n      : p.plugin === '@nx/vite/plugin'\n  );\n\n  if (!hasPlugin) {\n    if (!projectAlreadyHasViteTargets.build) {\n      addBuildTarget(tree, schema, 'build');\n    }\n\n    if (!schema.includeLib) {\n      if (!projectAlreadyHasViteTargets.serve) {\n        addServeTarget(tree, schema, 'serve');\n      }\n      if (!projectAlreadyHasViteTargets.preview) {\n        addPreviewTarget(tree, schema, 'preview');\n      }\n    }\n  }\n  if (projectType === 'library') {\n    // update tsconfig.lib.json to include vite/client\n    updateJson(\n      tree,\n      joinPathFragments(projectRoot, 'tsconfig.lib.json'),\n      (json) => {\n        json.compilerOptions ??= {};\n        json.compilerOptions.types ??= [];\n        if (!json.compilerOptions.types.includes('vite/client')) {\n          json.compilerOptions.types.push('vite/client');\n        }\n        return json;\n      }\n    );\n  }\n\n  if (!schema.newProject) {\n    // We are converting existing project to use Vite\n    if (schema.uiFramework === 'react') {\n      createOrEditViteConfig(\n        tree,\n        {\n          project: schema.project,\n          includeLib: schema.includeLib,\n          includeVitest: schema.includeVitest,\n          inSourceTests: schema.inSourceTests,\n          rollupOptionsExternal: [\n            \"'react'\",\n            \"'react-dom'\",\n            \"'react/jsx-runtime'\",\n          ],\n          imports: [\n            schema.compiler === 'swc'\n              ? `import react from '@vitejs/plugin-react-swc'`\n              : `import react from '@vitejs/plugin-react'`,\n          ],\n          plugins: ['react()'],\n        },\n        false,\n        undefined\n      );\n    } else {\n      createOrEditViteConfig(tree, schema, false, projectAlreadyHasViteTargets);\n    }\n  }\n\n  if (schema.includeVitest) {\n    const vitestTask = await vitestGenerator(tree, {\n      project: schema.project,\n      uiFramework: schema.uiFramework,\n      inSourceTests: schema.inSourceTests,\n      coverageProvider: 'v8',\n      skipViteConfig: true,\n      testTarget: 'test',\n      skipFormat: true,\n      addPlugin: schema.addPlugin,\n      compiler: schema.compiler,\n    });\n    tasks.push(vitestTask);\n  }\n\n  if (isUsingTsSolutionSetup(tree)) {\n    updatePackageJson(tree, schema);\n  }\n\n  if (!schema.skipFormat) {\n    await formatFiles(tree);\n  }\n\n  return runTasksInSerial(...tasks);\n}\n\nexport default viteConfigurationGenerator;\n\nfunction updatePackageJson(\n  tree: Tree,\n  options: ViteConfigurationGeneratorSchema\n) {\n  const project = readProjectConfiguration(tree, options.project);\n\n  const packageJsonPath = join(project.root, 'package.json');\n  let packageJson: PackageJson;\n  if (tree.exists(packageJsonPath)) {\n    packageJson = readJson(tree, packageJsonPath);\n  } else {\n    packageJson = {\n      name: getImportPath(tree, options.project),\n      version: '0.0.1',\n    };\n  }\n\n  // we always write/override the vite and project config with some set values,\n  // so we can rely on them\n  const main = join(project.root, 'src/index.ts');\n  // we configure the dts plugin with the entryRoot set to `src`\n  const rootDir = join(project.root, 'src');\n  const outputPath = joinPathFragments(project.root, 'dist');\n\n  packageJson = getUpdatedPackageJsonContent(packageJson, {\n    main,\n    outputPath,\n    projectRoot: project.root,\n    rootDir,\n    generateExportsField: true,\n    packageJsonPath,\n    format: ['esm', 'cjs'],\n    // when building both formats, we don't set the package.json \"type\" field, so\n    // we need to set the esm extension to \".mjs\" to match vite output\n    // see the \"File Extensions\" callout in https://vite.dev/guide/build.html#library-mode\n    outputFileExtensionForEsm: '.mjs',\n  });\n\n  writeJson(tree, packageJsonPath, packageJson);\n}\n"],"names":["viteConfigurationGenerator","viteConfigurationGeneratorInternal","host","schema","addPlugin","tree","nxJson","tasks","projectConfig","readProjectConfiguration","project","targets","root","projectRoot","projectType","includeLib","testEnvironment","projectAlreadyHasViteTargets","newProject","convertNonVite","jsInitTask","jsInitGenerator","skipFormat","tsConfigName","push","initTask","initGenerator","ensureDependencies","readNxJson","addPluginDefault","process","env","NX_ADD_PLUGINS","useInferencePlugins","hasPlugin","plugins","some","p","plugin","build","addBuildTarget","serve","addServeTarget","preview","addPreviewTarget","updateJson","joinPathFragments","json","compilerOptions","types","includes","uiFramework","createOrEditViteConfig","includeVitest","inSourceTests","rollupOptionsExternal","imports","compiler","undefined","vitestTask","vitestGenerator","coverageProvider","skipViteConfig","testTarget","isUsingTsSolutionSetup","updatePackageJson","formatFiles","runTasksInSerial","options","packageJsonPath","join","packageJson","exists","readJson","name","getImportPath","version","main","rootDir","outputPath","getUpdatedPackageJsonContent","generateExportsField","format","outputFileExtensionForEsm","writeJson"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;;;;;IAkLA,OAA0C;eAA1C;;IAjJgBA,0BAA0B;eAA1BA;;IAUMC,kCAAkC;eAAlCA;;;;wBAhCf;oBAIA;+BACuB;iCACS;uBAClB;oCAEc;gCAO5B;sBACmB;iCACE;gCACG;AAGxB,SAASD,2BACdE,IAAU,EACVC,MAAwC;IAExC,OAAOF,mCAAmCC,MAAM;QAC9CE,WAAW;OACRD;AAEP;AAEO,eAAeF,mCACpBI,IAAU,EACVF,MAAwC;QAyCtBG;QAhClBH,SAEA,8EAA8E;IAC9E,8EAA8E;IAC9EA,UA0BAA;IArCA,MAAMI,QAA6B,EAAE;IAErC,MAAMC,gBAAgBC,IAAAA,gCAAwB,EAACJ,MAAMF,OAAOO,OAAO;IACnE,MAAM,EAAEC,OAAO,EAAEC,MAAMC,WAAW,EAAE,GAAGL;QAEnBA;IAApB,MAAMM,cAAcN,CAAAA,6BAAAA,cAAcM,WAAW,YAAzBN,6BAA6B;;IAEjDL,gBAAAA,UAAAA,QAAOY,oCAAPZ,QAAOY,aAAeD,gBAAgB;;IAItCX,qBAAAA,WAAAA,QAAOa,8CAAPb,SAAOa,kBAAoB;IAE3B;;;GAGC,GACD,IAAIC,+BAA4C,CAAC;IAEjD,IAAI,CAACd,OAAOe,UAAU,EAAE;QACtB,MAAMC,IAAAA,8BAAc,EAACd,MAAMF,QAAQU,aAAaC,aAAaH;IAC/D;IAEA,MAAMS,aAAa,MAAMC,IAAAA,iBAAe,EAAChB,MAAM,eAC1CF;QACHmB,YAAY;QACZC,cAAcV,gBAAgB,MAAM,kBAAkB;;IAExDN,MAAMiB,IAAI,CAACJ;IACX,MAAMK,WAAW,MAAMC,IAAAA,aAAa,EAACrB,MAAM,eAAKF;QAAQmB,YAAY;;IACpEf,MAAMiB,IAAI,CAACC;IACXlB,MAAMiB,IAAI,CAACG,IAAAA,sCAAkB,EAACtB,MAAMF;IAEpC,MAAMG,SAASsB,IAAAA,kBAAU,EAACvB;IAC1B,MAAMwB,mBACJC,QAAQC,GAAG,CAACC,cAAc,KAAK,WAC/B1B,OAAO2B,mBAAmB,KAAK;;IACjC9B,eAAAA,WAAAA,QAAOC,kCAAPD,SAAOC,YAAcyB;IAErB,MAAMK,aAAY5B,kBAAAA,OAAO6B,OAAO,qBAAd7B,gBAAgB8B,IAAI,CAAC,CAACC,IACtC,OAAOA,MAAM,WACTA,MAAM,oBACNA,EAAEC,MAAM,KAAK;IAGnB,IAAI,CAACJ,WAAW;QACd,IAAI,CAACjB,6BAA6BsB,KAAK,EAAE;YACvCC,IAAAA,8BAAc,EAACnC,MAAMF,QAAQ;QAC/B;QAEA,IAAI,CAACA,OAAOY,UAAU,EAAE;YACtB,IAAI,CAACE,6BAA6BwB,KAAK,EAAE;gBACvCC,IAAAA,8BAAc,EAACrC,MAAMF,QAAQ;YAC/B;YACA,IAAI,CAACc,6BAA6B0B,OAAO,EAAE;gBACzCC,IAAAA,gCAAgB,EAACvC,MAAMF,QAAQ;YACjC;QACF;IACF;IACA,IAAIW,gBAAgB,WAAW;QAC7B,kDAAkD;QAClD+B,IAAAA,kBAAU,EACRxC,MACAyC,IAAAA,yBAAiB,EAACjC,aAAa,sBAC/B,CAACkC;gBACCA,OACAA;;YADAA,qBAAAA,QAAAA,MAAKC,8CAALD,MAAKC,kBAAoB,CAAC;;YAC1BD,WAAAA,wBAAAA,KAAKC,eAAe,EAACC,0BAArBF,sBAAqBE,QAAU,EAAE;YACjC,IAAI,CAACF,KAAKC,eAAe,CAACC,KAAK,CAACC,QAAQ,CAAC,gBAAgB;gBACvDH,KAAKC,eAAe,CAACC,KAAK,CAACzB,IAAI,CAAC;YAClC;YACA,OAAOuB;QACT;IAEJ;IAEA,IAAI,CAAC5C,OAAOe,UAAU,EAAE;QACtB,iDAAiD;QACjD,IAAIf,OAAOgD,WAAW,KAAK,SAAS;YAClCC,IAAAA,sCAAsB,EACpB/C,MACA;gBACEK,SAASP,OAAOO,OAAO;gBACvBK,YAAYZ,OAAOY,UAAU;gBAC7BsC,eAAelD,OAAOkD,aAAa;gBACnCC,eAAenD,OAAOmD,aAAa;gBACnCC,uBAAuB;oBACrB;oBACA;oBACA;iBACD;gBACDC,SAAS;oBACPrD,OAAOsD,QAAQ,KAAK,QAChB,CAAC,4CAA4C,CAAC,GAC9C,CAAC,wCAAwC,CAAC;iBAC/C;gBACDtB,SAAS;oBAAC;iBAAU;YACtB,GACA,OACAuB;QAEJ,OAAO;YACLN,IAAAA,sCAAsB,EAAC/C,MAAMF,QAAQ,OAAOc;QAC9C;IACF;IAEA,IAAId,OAAOkD,aAAa,EAAE;QACxB,MAAMM,aAAa,MAAMC,IAAAA,wBAAe,EAACvD,MAAM;YAC7CK,SAASP,OAAOO,OAAO;YACvByC,aAAahD,OAAOgD,WAAW;YAC/BG,eAAenD,OAAOmD,aAAa;YACnCO,kBAAkB;YAClBC,gBAAgB;YAChBC,YAAY;YACZzC,YAAY;YACZlB,WAAWD,OAAOC,SAAS;YAC3BqD,UAAUtD,OAAOsD,QAAQ;QAC3B;QACAlD,MAAMiB,IAAI,CAACmC;IACb;IAEA,IAAIK,IAAAA,uCAAsB,EAAC3D,OAAO;QAChC4D,kBAAkB5D,MAAMF;IAC1B;IAEA,IAAI,CAACA,OAAOmB,UAAU,EAAE;QACtB,MAAM4C,IAAAA,mBAAW,EAAC7D;IACpB;IAEA,OAAO8D,IAAAA,wBAAgB,KAAI5D;AAC7B;MAEA,WAAeP;AAEf,SAASiE,kBACP5D,IAAU,EACV+D,OAAyC;IAEzC,MAAM1D,UAAUD,IAAAA,gCAAwB,EAACJ,MAAM+D,QAAQ1D,OAAO;IAE9D,MAAM2D,kBAAkBC,IAAAA,WAAI,EAAC5D,QAAQE,IAAI,EAAE;IAC3C,IAAI2D;IACJ,IAAIlE,KAAKmE,MAAM,CAACH,kBAAkB;QAChCE,cAAcE,IAAAA,gBAAQ,EAACpE,MAAMgE;IAC/B,OAAO;QACLE,cAAc;YACZG,MAAMC,IAAAA,4BAAa,EAACtE,MAAM+D,QAAQ1D,OAAO;YACzCkE,SAAS;QACX;IACF;IAEA,6EAA6E;IAC7E,yBAAyB;IACzB,MAAMC,OAAOP,IAAAA,WAAI,EAAC5D,QAAQE,IAAI,EAAE;IAChC,8DAA8D;IAC9D,MAAMkE,UAAUR,IAAAA,WAAI,EAAC5D,QAAQE,IAAI,EAAE;IACnC,MAAMmE,aAAajC,IAAAA,yBAAiB,EAACpC,QAAQE,IAAI,EAAE;IAEnD2D,cAAcS,IAAAA,gCAA4B,EAACT,aAAa;QACtDM;QACAE;QACAlE,aAAaH,QAAQE,IAAI;QACzBkE;QACAG,sBAAsB;QACtBZ;QACAa,QAAQ;YAAC;YAAO;SAAM;QACtB,6EAA6E;QAC7E,kEAAkE;QAClE,sFAAsF;QACtFC,2BAA2B;IAC7B;IAEAC,IAAAA,iBAAS,EAAC/E,MAAMgE,iBAAiBE;AACnC"}