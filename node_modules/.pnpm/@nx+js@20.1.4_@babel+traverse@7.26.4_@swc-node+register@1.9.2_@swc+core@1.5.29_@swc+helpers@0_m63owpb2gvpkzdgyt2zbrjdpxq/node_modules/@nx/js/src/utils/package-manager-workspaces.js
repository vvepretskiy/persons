"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getProjectPackageManagerWorkspaceState = getProjectPackageManagerWorkspaceState;
exports.isUsingPackageManagerWorkspaces = isUsingPackageManagerWorkspaces;
exports.getProjectPackageManagerWorkspaceStateWarningTask = getProjectPackageManagerWorkspaceStateWarningTask;
const devkit_1 = require("@nx/devkit");
const minimatch_1 = require("minimatch");
const posix_1 = require("node:path/posix");
const package_json_1 = require("nx/src/plugins/package-json");
const semver_1 = require("semver");
function getProjectPackageManagerWorkspaceState(tree, projectRoot) {
    if (!isUsingPackageManagerWorkspaces(tree)) {
        return 'no-workspaces';
    }
    const patterns = (0, package_json_1.getGlobPatternsFromPackageManagerWorkspaces)(tree.root, (path) => (0, devkit_1.readJson)(tree, path, { expectComments: true }));
    const isIncluded = patterns.some((p) => (0, minimatch_1.minimatch)((0, posix_1.join)(projectRoot, 'package.json'), p));
    return isIncluded ? 'included' : 'excluded';
}
function isUsingPackageManagerWorkspaces(tree) {
    return (0, devkit_1.isWorkspacesEnabled)((0, devkit_1.detectPackageManager)(tree.root), tree.root);
}
function getProjectPackageManagerWorkspaceStateWarningTask(projectPackageManagerWorkspaceState, workspaceRoot) {
    return () => {
        if (projectPackageManagerWorkspaceState !== 'excluded') {
            return;
        }
        const packageManager = (0, devkit_1.detectPackageManager)(workspaceRoot);
        let adviseMessage = 'updating the "workspaces" option in the workspace root "package.json" file with the project root or pattern that includes it';
        let packageManagerWorkspaceSetupDocs;
        if (packageManager === 'pnpm') {
            adviseMessage =
                'updating the "pnpm-workspace.yaml" file with the project root or pattern that includes it';
            packageManagerWorkspaceSetupDocs =
                'https://pnpm.io/workspaces and https://pnpm.io/pnpm-workspace_yaml';
        }
        else if (packageManager === 'yarn') {
            const yarnVersion = (0, devkit_1.getPackageManagerVersion)(packageManager, workspaceRoot);
            if ((0, semver_1.lt)(yarnVersion, '2.0.0')) {
                packageManagerWorkspaceSetupDocs =
                    'https://classic.yarnpkg.com/lang/en/docs/workspaces/';
            }
            else {
                packageManagerWorkspaceSetupDocs =
                    'https://yarnpkg.com/features/workspaces';
            }
        }
        else if (packageManager === 'npm') {
            packageManagerWorkspaceSetupDocs =
                'https://docs.npmjs.com/cli/v10/using-npm/workspaces';
        }
        else if (packageManager === 'bun') {
            packageManagerWorkspaceSetupDocs =
                'https://bun.sh/docs/install/workspaces';
        }
        devkit_1.output.warn({
            title: `The project is not included in the package manager workspaces configuration`,
            bodyLines: [
                `Please add the project to the package manager workspaces configuration by ${adviseMessage}.`,
                `Read more about the ${packageManager} workspaces feature and how to set it up at ${packageManagerWorkspaceSetupDocs}.`,
            ],
        });
    };
}
