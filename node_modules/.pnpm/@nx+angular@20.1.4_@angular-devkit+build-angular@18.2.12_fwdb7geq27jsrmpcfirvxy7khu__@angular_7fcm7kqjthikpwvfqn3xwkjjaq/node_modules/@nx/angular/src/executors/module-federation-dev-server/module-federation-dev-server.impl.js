"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.moduleFederationDevServerExecutor = moduleFederationDevServerExecutor;
const tslib_1 = require("tslib");
const devkit_1 = require("@nx/devkit");
const lib_1 = require("./lib");
const rxjs_for_await_1 = require("@nx/devkit/src/utils/rxjs-for-await");
const async_iterable_1 = require("@nx/devkit/src/utils/async-iterable");
const module_federation_1 = require("@nx/webpack/src/utils/module-federation");
const wait_for_port_open_1 = require("@nx/web/src/utils/wait-for-port-open");
const file_server_impl_1 = tslib_1.__importDefault(require("@nx/web/src/executors/file-server/file-server.impl"));
const ngcli_adapter_1 = require("nx/src/adapter/ngcli-adapter");
const dev_server_impl_1 = require("../../builders/dev-server/dev-server.impl");
const module_federation_2 = require("../../builders/utilities/module-federation");
const path_1 = require("path");
const fs_1 = require("fs");
const start_remote_proxies_1 = require("@nx/webpack/src/utils/module-federation/start-remote-proxies");
const parse_static_remotes_config_1 = require("@nx/webpack/src/utils/module-federation/parse-static-remotes-config");
async function* moduleFederationDevServerExecutor(schema, context) {
    // Force Node to resolve to look for the nx binary that is inside node_modules
    const nxBin = require.resolve('nx/bin/nx');
    const options = (0, lib_1.normalizeOptions)(schema);
    const { projects: workspaceProjects } = (0, devkit_1.readProjectsConfigurationFromProjectGraph)(context.projectGraph);
    const project = workspaceProjects[context.projectName];
    const currIter = options.static
        ? (0, file_server_impl_1.default)({
            port: options.port,
            host: options.host,
            ssl: options.ssl,
            buildTarget: options.buildTarget,
            parallel: false,
            spa: false,
            withDeps: false,
            cors: true,
            cacheSeconds: -1,
        }, context)
        : (0, rxjs_for_await_1.eachValueFrom)((0, dev_server_impl_1.executeDevServerBuilder)(options, await (0, ngcli_adapter_1.createBuilderContext)({
            builderName: '@nx/angular:webpack-browser',
            description: 'Build a browser application',
            optionSchema: require('../../builders/webpack-browser/schema.json'),
        }, context)));
    if (options.isInitialHost === false) {
        return yield* currIter;
    }
    let pathToManifestFile;
    if (!options.pathToManifestFile) {
        pathToManifestFile = (0, module_federation_2.getDynamicMfManifestFile)(project, context.root);
    }
    else {
        const userPathToManifestFile = (0, path_1.join)(context.root, options.pathToManifestFile);
        if (!(0, fs_1.existsSync)(userPathToManifestFile)) {
            throw new Error(`The provided Module Federation manifest file path does not exist. Please check the file exists at "${userPathToManifestFile}".`);
        }
        else if ((0, path_1.extname)(options.pathToManifestFile) !== '.json') {
            throw new Error(`The Module Federation manifest file must be a JSON. Please ensure the file at ${userPathToManifestFile} is a JSON.`);
        }
        pathToManifestFile = userPathToManifestFile;
    }
    (0, module_federation_2.validateDevRemotes)(options, workspaceProjects);
    const moduleFederationConfig = (0, module_federation_1.getModuleFederationConfig)(project.targets.build.options.tsConfig, context.root, project.root, 'angular');
    const remoteNames = options.devRemotes.map((r) => typeof r === 'string' ? r : r.remoteName);
    const remotes = (0, module_federation_1.getRemotes)(remoteNames, options.skipRemotes, moduleFederationConfig, {
        projectName: project.name,
        projectGraph: context.projectGraph,
        root: context.root,
    }, pathToManifestFile);
    options.staticRemotesPort ??= remotes.staticRemotePort;
    // Set NX_MF_DEV_REMOTES for the Nx Runtime Library Control Plugin
    process.env.NX_MF_DEV_REMOTES = JSON.stringify([
        ...(remotes.devRemotes.map((r) => typeof r === 'string' ? r : r.remoteName) ?? []).map((r) => r.replace(/-/g, '_')),
        project.name.replace(/-/g, '_'),
    ]);
    const staticRemotesConfig = (0, parse_static_remotes_config_1.parseStaticRemotesConfig)([...remotes.staticRemotes, ...remotes.dynamicRemotes], context);
    const mappedLocationsOfStaticRemotes = await (0, lib_1.buildStaticRemotes)(staticRemotesConfig, nxBin, context, options);
    const devRemoteIters = await (0, lib_1.startRemotes)(remotes.devRemotes, workspaceProjects, options, context, 'serve');
    const staticRemotesIter = (0, lib_1.startStaticRemotesFileServer)(staticRemotesConfig, context, options);
    (0, start_remote_proxies_1.startRemoteProxies)(staticRemotesConfig, mappedLocationsOfStaticRemotes, options.ssl
        ? {
            pathToCert: options.sslCert,
            pathToKey: options.sslKey,
        }
        : undefined);
    const removeBaseUrlEmission = (iter) => (0, async_iterable_1.mapAsyncIterable)(iter, (v) => ({
        ...v,
        baseUrl: undefined,
    }));
    return yield* (0, async_iterable_1.combineAsyncIterables)(removeBaseUrlEmission(currIter), ...devRemoteIters.map(removeBaseUrlEmission), ...(staticRemotesIter ? [removeBaseUrlEmission(staticRemotesIter)] : []), (0, async_iterable_1.createAsyncIterable)(async ({ next, done }) => {
        if (!options.isInitialHost) {
            done();
            return;
        }
        if (remotes.remotePorts.length === 0) {
            devkit_1.logger.info(`NX All remotes started, server ready at http://localhost:${options.port}`);
            next({ success: true, baseUrl: `http://localhost:${options.port}` });
            done();
            return;
        }
        try {
            const portsToWaitFor = staticRemotesIter
                ? [options.staticRemotesPort, ...remotes.remotePorts]
                : [...remotes.remotePorts];
            await Promise.all(portsToWaitFor.map((port) => (0, wait_for_port_open_1.waitForPortOpen)(port, {
                retries: 480,
                retryDelay: 2500,
                host: 'localhost',
            })));
            devkit_1.logger.info(`NX All remotes started, server ready at http://localhost:${options.port}`);
            next({ success: true, baseUrl: `http://localhost:${options.port}` });
        }
        catch (err) {
            throw new Error(`Failed to start remotes. Check above for any errors.`, {
                cause: err,
            });
        }
        finally {
            done();
        }
    }));
}
exports.default = moduleFederationDevServerExecutor;
