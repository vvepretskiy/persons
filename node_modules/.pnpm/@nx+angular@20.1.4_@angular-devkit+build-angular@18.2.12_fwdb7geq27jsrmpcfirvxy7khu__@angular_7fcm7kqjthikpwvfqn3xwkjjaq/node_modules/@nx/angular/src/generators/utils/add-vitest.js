"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addVitest = addVitest;
const devkit_1 = require("@nx/devkit");
const versions_1 = require("../../utils/versions");
async function addVitest(tree, options) {
    if (!options.skipPackageJson) {
        (0, devkit_1.addDependenciesToPackageJson)(tree, {}, {
            '@analogjs/vitest-angular': versions_1.analogVitestAngular,
            '@analogjs/vite-plugin-angular': versions_1.analogVitestAngular,
        }, undefined, true);
    }
    const { createOrEditViteConfig, vitestGenerator } = (0, devkit_1.ensurePackage)('@nx/vite', versions_1.nxVersion);
    const relativeTestSetupPath = (0, devkit_1.joinPathFragments)('src', 'test-setup.ts');
    const setupFile = (0, devkit_1.joinPathFragments)(options.projectRoot, relativeTestSetupPath);
    if (!tree.exists(setupFile)) {
        tree.write(setupFile, `import '@analogjs/vitest-angular/setup-zone';

import {
  BrowserDynamicTestingModule,
  platformBrowserDynamicTesting,
} from '@angular/platform-browser-dynamic/testing';
import { getTestBed } from '@angular/core/testing';

getTestBed().initTestEnvironment(
  BrowserDynamicTestingModule,
  platformBrowserDynamicTesting()
);
`);
        await vitestGenerator(tree, {
            project: options.name,
            uiFramework: 'none',
            skipViteConfig: true,
            testEnvironment: 'jsdom',
            coverageProvider: 'v8',
            addPlugin: false,
        });
        createOrEditViteConfig(tree, {
            project: options.name,
            includeLib: false,
            includeVitest: true,
            inSourceTests: false,
            imports: [`import angular from '@analogjs/vite-plugin-angular'`],
            plugins: ['angular()'],
            setupFile: relativeTestSetupPath,
            useEsmExtension: true,
        }, true);
    }
}
