"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.angularStoriesGenerator = angularStoriesGenerator;
const tslib_1 = require("tslib");
const devkit_1 = require("@nx/devkit");
const component_story_1 = tslib_1.__importDefault(require("../component-story/component-story"));
const component_info_1 = require("../utils/storybook-ast/component-info");
const entry_point_1 = require("../utils/storybook-ast/entry-point");
const module_info_1 = require("../utils/storybook-ast/module-info");
const minimatch_1 = require("minimatch");
const versions_1 = require("../../utils/versions");
async function angularStoriesGenerator(tree, options) {
    const entryPoints = (0, entry_point_1.getProjectEntryPoints)(tree, options.name);
    const componentsInfo = [];
    for (const entryPoint of entryPoints) {
        const moduleFilePaths = (0, module_info_1.getModuleFilePaths)(tree, entryPoint);
        componentsInfo.push(...(0, component_info_1.getComponentsInfo)(tree, entryPoint, moduleFilePaths, options.name), ...(0, component_info_1.getStandaloneComponentsInfo)(tree, entryPoint));
    }
    const componentInfos = componentsInfo.filter((f) => !options.ignorePaths?.some((pattern) => {
        const shouldIgnorePath = (0, minimatch_1.minimatch)((0, devkit_1.joinPathFragments)(f.moduleFolderPath, f.path, `${f.componentFileName}.ts`), pattern);
        return shouldIgnorePath;
    }));
    for (const info of componentInfos) {
        if (info === undefined) {
            continue;
        }
        await (0, component_story_1.default)(tree, {
            projectPath: info.moduleFolderPath,
            componentName: info.name,
            componentPath: info.path,
            componentFileName: info.componentFileName,
            interactionTests: options.interactionTests ?? true,
            skipFormat: true,
        });
    }
    const tasks = [];
    if (options.interactionTests) {
        const { interactionTestsDependencies, addInteractionsInAddons } = (0, devkit_1.ensurePackage)('@nx/storybook', versions_1.nxVersion);
        const projectConfiguration = (0, devkit_1.readProjectConfiguration)(tree, options.name);
        addInteractionsInAddons(tree, projectConfiguration);
        tasks.push((0, devkit_1.addDependenciesToPackageJson)(tree, {}, interactionTestsDependencies()));
    }
    if (!options.skipFormat) {
        await (0, devkit_1.formatFiles)(tree);
    }
    return (0, devkit_1.runTasksInSerial)(...tasks);
}
exports.default = angularStoriesGenerator;
