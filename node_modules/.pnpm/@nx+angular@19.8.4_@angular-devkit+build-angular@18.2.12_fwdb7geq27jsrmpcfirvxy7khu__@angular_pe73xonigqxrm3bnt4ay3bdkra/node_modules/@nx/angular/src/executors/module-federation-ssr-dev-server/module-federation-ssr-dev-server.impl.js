"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.moduleFederationSsrDevServerExecutor = moduleFederationSsrDevServerExecutor;
const devkit_1 = require("@nx/devkit");
const fs_1 = require("fs");
const project_graph_1 = require("nx/src/project-graph/project-graph");
const path_1 = require("path");
const module_federation_1 = require("../../builders/utilities/module-federation");
const module_federation_2 = require("@nx/webpack/src/utils/module-federation");
const parse_static_remotes_config_1 = require("@nx/webpack/src/utils/module-federation/parse-static-remotes-config");
const build_static_remotes_1 = require("./lib/build-static-remotes");
const start_dev_remotes_1 = require("./lib/start-dev-remotes");
const start_static_remotes_1 = require("./lib/start-static-remotes");
const async_iterable_1 = require("@nx/devkit/src/utils/async-iterable");
const rxjs_for_await_1 = require("@nx/devkit/src/utils/rxjs-for-await");
const ngcli_adapter_1 = require("nx/src/adapter/ngcli-adapter");
const normalize_options_1 = require("./lib/normalize-options");
const wait_for_port_open_1 = require("@nx/web/src/utils/wait-for-port-open");
const start_ssr_remote_proxies_1 = require("@nx/webpack/src/utils/module-federation/start-ssr-remote-proxies");
const angular_version_utils_1 = require("../utilities/angular-version-utils");
async function* moduleFederationSsrDevServerExecutor(schema, context) {
    const nxBin = require.resolve('nx/bin/nx');
    const options = (0, normalize_options_1.normalizeOptions)(schema);
    const { major: angularMajorVersion } = (0, angular_version_utils_1.getInstalledAngularVersionInfo)();
    const { executeSSRDevServerBuilder } = angularMajorVersion >= 17
        ? require('@angular-devkit/build-angular')
        : require('@nguniversal/builders');
    const currIter = (0, rxjs_for_await_1.eachValueFrom)(executeSSRDevServerBuilder(options, await (0, ngcli_adapter_1.createBuilderContext)({
        builderName: '@nx/angular:webpack-server',
        description: 'Build a ssr application',
        optionSchema: require('../../builders/webpack-server/schema.json'),
    }, context)));
    if (options.isInitialHost === false) {
        return yield* currIter;
    }
    const { projects: workspaceProjects } = (0, project_graph_1.readProjectsConfigurationFromProjectGraph)(context.projectGraph);
    const project = workspaceProjects[context.projectName];
    let pathToManifestFile;
    if (options.pathToManifestFile) {
        const userPathToManifestFile = (0, path_1.join)(context.root, options.pathToManifestFile);
        if (!(0, fs_1.existsSync)(userPathToManifestFile)) {
            throw new Error(`The provided Module Federation manifest file path does not exist. Please check the file exists at "${userPathToManifestFile}".`);
        }
        else if ((0, path_1.extname)(options.pathToManifestFile) !== '.json') {
            throw new Error(`The Module Federation manifest file must be a JSON. Please ensure the file at ${userPathToManifestFile} is a JSON.`);
        }
        pathToManifestFile = userPathToManifestFile;
    }
    else {
        pathToManifestFile = (0, module_federation_1.getDynamicMfManifestFile)(project, context.root);
    }
    (0, module_federation_1.validateDevRemotes)({ devRemotes: options.devRemotes }, workspaceProjects);
    const moduleFederationConfig = (0, module_federation_2.getModuleFederationConfig)(project.targets.build.options.tsConfig, context.root, project.root, 'angular');
    const remoteNames = options.devRemotes.map((r) => typeof r === 'string' ? r : r.remoteName);
    const remotes = (0, module_federation_2.getRemotes)(remoteNames, options.skipRemotes, moduleFederationConfig, {
        projectName: project.name,
        projectGraph: context.projectGraph,
        root: context.root,
    }, pathToManifestFile);
    options.staticRemotesPort ??= remotes.staticRemotePort;
    const staticRemotesConfig = (0, parse_static_remotes_config_1.parseStaticSsrRemotesConfig)([...remotes.staticRemotes, ...remotes.dynamicRemotes], context);
    const mappedLocationsOfStaticRemotes = await (0, build_static_remotes_1.buildStaticRemotes)(staticRemotesConfig, nxBin, context, options);
    // Set NX_MF_DEV_REMOTES for the Nx Runtime Library Control Plugin
    process.env.NX_MF_DEV_REMOTES = JSON.stringify([
        ...(options.devRemotes ?? []),
        project.name,
    ]);
    const devRemotes = await (0, start_dev_remotes_1.startRemotes)(remotes.devRemotes, workspaceProjects, options, context);
    const staticRemotes = (0, start_static_remotes_1.startStaticRemotes)(staticRemotesConfig, context, options);
    (0, start_ssr_remote_proxies_1.startSsrRemoteProxies)(staticRemotesConfig, mappedLocationsOfStaticRemotes, options.ssl
        ? { pathToCert: options.sslCert, pathToKey: options.sslKey }
        : undefined);
    const removeBaseUrlEmission = (iter) => (0, async_iterable_1.mapAsyncIterable)(iter, (v) => ({
        ...v,
        baseUrl: undefined,
    }));
    const combined = (0, async_iterable_1.combineAsyncIterables)(removeBaseUrlEmission(staticRemotes), ...(devRemotes ? devRemotes.map(removeBaseUrlEmission) : []), (0, async_iterable_1.createAsyncIterable)(async ({ next, done }) => {
        if (!options.isInitialHost) {
            done();
            return;
        }
        if (remotes.remotePorts.length) {
            devkit_1.logger.info(`Nx All remotes started, server ready at http://localhost:${options.port}`);
            next({ success: true, baseUrl: `http://localhost:${options.port}` });
            done();
            return;
        }
        try {
            const portsToWaitFor = staticRemotes
                ? [options.staticRemotesPort, ...remotes.remotePorts]
                : [...remotes.remotePorts];
            await Promise.all(portsToWaitFor.map((port) => (0, wait_for_port_open_1.waitForPortOpen)(port, {
                retries: 480,
                retryDelay: 2500,
                host: 'localhost',
            })));
            next({ success: true, baseUrl: `http://localhost:${options.port}` });
        }
        catch (error) {
            throw new Error(`Failed to start remotes. Check above for any errors.`, {
                cause: error,
            });
        }
        finally {
            done();
        }
    }));
    let refs = 2 + (devRemotes?.length ?? 0);
    for await (const result of combined) {
        if (result.success === false)
            throw new Error('Remotes failed to start');
        if (result.success)
            refs--;
        if (refs === 0)
            break;
    }
    return yield* currIter;
}
exports.default = moduleFederationSsrDevServerExecutor;
